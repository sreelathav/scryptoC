pandoc.table(mcapLead[1:15,c("Name" ,"M.cap" ,"Price", "var1h", "var24h","var7d", "Rank")])
}
#' @param currency_type choose from C('Bitcoin','Ethereum', 'XRP')
#'
#' @importFrom tidyr 'gather'
#' @import ggplot2
#' @importFrom magrittr 'extract2' '%>%'
#'
#' @return Prints summary of the variables and display plots to the console
#'
#' @seealso \code{\link{print_cryptoC}}, \code{\link{get_cryptoC}},
#' \code{\link{fit}}, \code{\link{plot}}
plotAll <- function(obj,
currency_type = c('Bitcoin', 'Ethereum', 'XRP')) {
UseMethod('plotAll')
}
runApp('scryptoC_app.R')
scryptoC_app()
scryptoC_app <- function(){
# Define server logic required to plot fitted currency variable -----
server <- function(input, output) {
#get currency data
data_cryptoC = get_cryptoC()
#plots for the side panel
output$sumPlot <- renderPlot({
plotAll(data_cryptoC,
currency_type=input$currency_type)
})
#render plot for main panel
output$fitPlot <- renderPlot({
#get fit data
fit_cryptoC = fit.cryptoC_data(data_cryptoC,
currency_type=input$currency_type,
var_type = input$varType)
# plot fit model
plot.cryptoC_fit(fit_cryptoC,
time_grid = pretty(as.numeric(fit_cryptoC$data$nDate), n = 365))
})
#Trying to render print output
output$weeksPerf <- renderPrint({
print_cryptoC()
})
}
#define ui for the app ----
# Sidebar with a slider input for number of bins
ui <- fluidPage(
# App title ----
titlePanel("Leading Crypto Currency Analysis"),
sidebarLayout(
# with 2 select input and a render plot
sidebarPanel(
selectInput("currency_type",
"Crypto Currency",
choices = list("Bitcoin" = "Bitcoin",
"Ethereum" = "Ethereum",
"XRP" = "XRP"),
selected = "XRP"),
selectInput("var_type",
"Variable  ",
choices = list( "Market Cap" = "Mcap",
"Closing Price" = "Close"),
selected = "Close"),
plotOutput("sumPlot")
),
# Shows fit plot of smooth spline distribution
mainPanel(
plotOutput("fitPlot"),
verbatimTextOutput("weeksPerf")
)
)
)
# Run the application----
shinyApp(ui = ui, server = server)
}
scryptoC_app()
?verbatimTextOutput()
#' show case output of all the 5 functions of the package
#'
#' @import shiny
#' @return opens up the shiny app for the scryptoC package
#' @export
#'
#' @examples
#' \dontrun{
#'    scryptoC_app()
#' }
scryptoC_app <- function(){
# Define server logic required to plot fitted currency variable -----
server <- function(input, output) {
#get currency data
data_cryptoC = get_cryptoC()
#plots for the side panel
output$sumPlot <- renderPlot({
plotAll(data_cryptoC,
currency_type=input$currency_type)
})
#render plot for main panel
output$fitPlot <- renderPlot({
#get fit data
fit_cryptoC = fit.cryptoC_data(data_cryptoC,
currency_type=input$currency_type,
var_type = input$varType)
# plot fit model
plot.cryptoC_fit(fit_cryptoC,
time_grid = pretty(as.numeric(fit_cryptoC$data$nDate), n = 365))
})
#Trying to render print output
output$weeksPerf <- renderPrint({
print_cryptoC()
})
}
#define ui for the app ----
ui <- fluidPage(
# App title
titlePanel("Leading Crypto Currency Analysis"),
sidebarLayout(
# with 2 select input and a render plot
sidebarPanel(
selectInput("currency_type",
"Crypto Currency",
choices = list("Bitcoin" = "Bitcoin",
"Ethereum" = "Ethereum",
"XRP" = "XRP"),
selected = "XRP"),
selectInput("var_type",
"Variable  ",
choices = list( "Market Cap" = "Mcap",
"Closing Price" = "Close"),
selected = "Close"),
plotOutput("sumPlot")
),
# Shows fit plot of smooth spline distribution
mainPanel(
plotOutput("fitPlot"),
verbatimTextOutput("weeksPerf")
)
)
)
# Run the application----
shinyApp(ui = ui, server = server)
}
#' Loads libraries required for the package scryptoC
#' Installs them, if they are not already installed
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' load_libs()
#' }
#'
load_libs <- function(){
packs = c('utils','rvest','xml2','lubridate', 'dplyr','tidyr', 'readr',
'tibble','ggplot2','viridis','stats', 'shiny')
for(p in packs){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p)
}
}
document()
library(scryptoC)
setwd("~/advDataProgR/labs/scryptoC")
document()
library(roxygen2)
roxygenise()
library(scryptoC)
check()
library(devtools)
#' Loads libraries required for the package scryptoC
#' Installs them, if they are not already installed
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' load_libs()
#' }
#'
load_libs <- function(){
packs = c('utils','rvest','xml2','lubridate', 'dplyr','tidyr', 'readr', 'magrittr',
'tibble','ggplot2','viridis','stats', 'shiny')
for(p in packs){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p)
}
}
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
#' Installs them, if they are not already installed
#' @importFrom utils 'install.packages'
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' load_libs()
#' }
#'
load_libs <- function(){
packs = c('utils','rvest','xml2','lubridate', 'dplyr','tidyr', 'readr', 'magrittr',
'tibble','ggplot2','viridis','stats', 'shiny')
for(p in packs){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p)
}
}
document()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
?require()
document()
document()
#' Installs them, if they are not already installed
#' @importFrom utils 'install.packages'
#' @return nothing
#' @export
#'
#' @examples
#' \dontrun{
#' load_libs()
#' }
#'
load_libs <- function(){
packs = c('utils','rvest','xml2','lubridate', 'dplyr','tidyr', 'readr', 'magrittr',
'tibble','ggplot2','viridis','stats', 'shiny')
l = NULL
for(l in packs){
if(!require(l,character.only = TRUE)) install.packages(l)
library(l)
}
}
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
?require()
?use_vignette()
setwd("~/advDataProgR/labs/scryptoC")
use_vignette("ScryptoC: Package for Crypto Currency")
use_vignette("scryptoC man")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
print_cryptoC()
obj <- get_cryptoC()
bex <- get_cryptoC()
plotAll(obj,'Bitcoin')
plotAll(bex, 'XRP')
plotAll(obj,'Ethereum')
plotAll(obj,'Bitcoin')
plotAll(bex, 'XRP')
plotAll(obj,'Ethereum')
out1 <-  fit(obj,'Bitcoin','Close')
out2 <-  fit(bex, 'XRP', 'Mcap')
out1 <-  fit(obj,'Bitcoin','Close')
names(out1)
out2 <-  fit(bex, 'XRP', 'Mcap')
plot(out1)
plot(out2)
plot(out2)
out1 <-  fit(obj,'Bitcoin','Mcap')
out2 <-  fit(bex, 'XRP', 'Close')
plot(out2)
out1 <-  fit(obj,'Bitcoin','Mcap')
out1
out2 <-  fit(bex, 'XRP', 'Close')
plot(out2)
scryptoC_app()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
document()
check()
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
print_cryptoC()
?print_cryptoC
?print_cryptoC()
load_libs()
load_libs()
document()
library("scryptoC", lib.loc="~/R/win-library/3.5")
library(scryptoC)
load_libs()
load_libs()
library("scryptoC", lib.loc="~/R/win-library/3.5")
document()
library(roxygen2)
roxegenise()
roxygenise()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
print_cryptoC()
check()
library(devtools)
check()
build()
library("scryptoC", lib.loc="~/R/win-library/3.5")
build()
build()
getwd()
document()
library(devtools)
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
use_vignette("guide_scryptoC")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(scryptoC)
print_cryptoC()
#print_cryptoC(save_file = 'No')
#print_cryptoC(save_file = 'yes')
library(scryptoC)
print_cryptoC()
print_cryptoC()
obj <-  get_cryptoC()
# bex <-  get_cryptoC()
knitr::kable(obj$Bitcoin)
# knitr::kable(obj$Ethereum)
# knitr::kable(obj$XRP)
knitr::kable(head(obj$Bitcoin,10))
# knitr::kable(obj$Ethereum)
# knitr::kable(obj$XRP)
knitr::kable(head(obj$Bitcoin,5))
knitr::kable(tail(obj$Bitcoin,5))
# knitr::kable(obj$Ethereum)
# knitr::kable(bex$XRP)
knitr::kable(head(obj$Bitcoin,5))
knitr::kable(tail(obj$XRP,5))
# knitr::kable(obj$Ethereum)
# knitr::kable(bex$XRP)
plotAll(obj,'XRP')
plotAll(obj,'XRP')
library(scryptoC)
plotAll(obj,'XRP')
# obj <-  get_cryptoC()
outXC <-  fit(obj,'XRP','Close')
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
detach("package:scryptoC", unload=TRUE)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
obj <-  get_cryptoC()
plotAll(obj,'XRP')
# bex <-  get_cryptoC()
# plotAll(bex,'Bitcoin')
# plotAll(bex,'Ethereum')
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
document()
check()
check()
check()
build()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
obj <-  get_cryptoC()
plotAll(obj,'XRP')
# bex <-  get_cryptoC()
# plotAll(bex,'Bitcoin')
# plotAll(bex,'Ethereum')
obj <-  get_cryptoC()
plotAll(obj,'XRP')
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
library(devtools)
document()
library(scryptoC)
check()
document()
check()
getwd()
install.packages("c:/Users/sreel/Documents/advDataProgR/labs/scryptoC_0.1.0.tar.gz")
install.packages("C:/Users/sreel/Documents/advDataProgR/labs/scryptoC_0.1.0.tar.gz")
check(pkg="C:/Users/sreel/Documents/advDataProgR/labs/scryptoC_0.1.0.tar.gz")
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
document()
check()
check()
document()
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
document()
check()
check()
document()
library(scryptoC)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
check()
check()
check()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
document()
check()
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
check()
document()
check()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
detach("package:scryptoC", unload=TRUE)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
check()
??scryptoC
?get_cryptoC()
library("scryptoC", lib.loc="~/R/win-library/3.5")
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
check()
document()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
detach("package:scryptoC", unload=TRUE)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library(devtools)
document()
remove.packages("scryptoC", lib="~/R/win-library/3.5")
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
detach("package:scryptoC", unload=TRUE)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
remove.packages("scryptoC", lib="~/R/win-library/3.5")
documet()
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
library("scryptoC", lib.loc="~/R/win-library/3.5")
detach("package:scryptoC", unload=TRUE)
remove.packages("scryptoC", lib="~/R/win-library/3.5")
document()
library(scryptoC)
library("scryptoC", lib.loc="~/R/win-library/3.5")
check()
check()
check()
check()
document()
check()
document()
check()
document()
check()
document()
check()
??scryptoC
?plotAll()
?plotAll()
check()
build()
devtools::load_all()
library("scryptoC", lib.loc="~/R/win-library/3.5")
scryptoC_app()
build_win()
